# -*- coding: utf-8 -*-
"""Visualize Netflix using Plotly express.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HIOtqZJ01aZkDeuPcHWoLsrChUEoZvJh

#**Data Visualization 3 - Final Assignment**


---


## **Karam Abdin**


---
Dataset source: [Kaggle](https://www.kaggle.com/datasets/shivamb/netflix-shows)

Netflix is one of the leading entertainment services globally, with 222 million paid members in over 190 countries enjoying TV series, documentaries, and feature films across various genres and languages. Netflix is one of the leading entertainment services in the world. On any screen connected to the internet, subscribers can watch as much as they want, whenever they want, wherever they want. Members are not required to watch any advertisements or make commitments to play, pause, or resume watching content.


---
"""

pip install dash

!pip install jupyter-dash

"""# Importing required libraries"""

import pandas as pd
import plotly.express as px
import dash
from dash import dcc
from dash import html
from dash import Input, Output
from jupyter_dash import JupyterDash
import os

"""The colors and the template that they will use"""

colors = ['#0F2C67', '#CD1818', '#F3950D', '#0B4619']
Template = 'simple_white'

"""Importing the dataset from *Github*"""

df = pd.read_csv("https://raw.githubusercontent.com/karamabdin/Data-visualisation-with-Plotly-and-Dash/main/Dataset")

"""# Looking at the first 2 rows and the column names of the dataset"""

df.head(2)

"""# Dealling with the ***missing*** data"""

df.isna().sum()

## Filling missing data
# Filling cast column missing values with unknown
df["cast"].fillna("Unknon", inplace=True)

# Filling country column missing values with unknown
df["country"].fillna("Unknown", inplace=True)

# Dropping missing values
df.dropna(subset = ["date_added","rating","duration"], inplace = True)

df.isna().sum()

"""NOTE: We have 2621 missing data values in the director's column. Removing this missing data will relate to removing a big part from the dataset. I will keep them since I will not use this column in my visualization. While creating a new dataset I will replace this missing data with "NULL"

# Exploring the dataset information
"""

df.info()

"""# Crating new columns"""

# Crate new column called year added
data = df.copy()
# Replace the missing data in diractore column with NULL
data= data.fillna("NULL")
# Create new column called year_added
data["year_added"] = data["date_added"].apply(lambda x : x.split(",")[-1])
# Create new column called month_added
data["month_added"] = data["date_added"].apply(lambda x : x.split(" ")[0])

# Creating new column called count with valuse 1 
data["count"] = "1"

"""### After we worked on preparing the dataset and its reade to use we can now start with plotting our data using **plotly express**"""

# Creating bar chart
Labels ={"type":"Show Type", "sum of count":"Count"}
Title = "Netflix count Movies VS TV Shows"
count_shows = px.histogram(data, x="type", y = "count",
                      color = "type",template=Template,
                      color_discrete_sequence=colors[0:2],
                      labels = Labels, title = Title, text_auto=True
                      )
count_shows.show()

"""The bar chart shows that Netflix contains more movies than TV shows.



"""

# Create pie chart showing the Ratio of Netflix "Movie" and "TV Show"
ratio_pie = px.pie(data['type'].value_counts().reset_index(),
             hole=0.5, values='type', names='index',
             template = Template, color_discrete_sequence = colors[0:2],
             title='Percentage of TV Shows and Movies released on Netflix')
ratio_pie.show()

"""The pie chart present that the Netflix produce more Movies compared to TV Shows. Netflix has 69.7%% Movies and 30.3% TV Shows.         
**69.7% - 30.3% = 39.4%**

"""

# Creating a bar chart including the movies and TV shows added to Netflix per year
Labels = {"type":"Show Type", "count":"Count","year_added":"Year"}
Title = "Numbers of Movies and TV Show added to Netflix per year"
year_added_hist = px.histogram(data, x= 'year_added',color ='type',
                   height = 500, template = Template,
                   color_discrete_sequence=colors[0:2],
                   title = Title, labels = Labels,
                   text_auto = True)
year_added_hist.show()

# Crating a bar chart using the count's colomns to explore esally the max of which month Netflix added movies to its platform.
movie_count_month = pd.DataFrame({'count': data.groupby('type').get_group('Movie').groupby('month_added')['title'].
                            count().sort_values(ascending=False)})
Title='Number of movies added per month on Netflix'
Labels = {"count":"Count of Movies","month_added":"Month"}
fig_movie_bar = px.bar(movie_count_month, x=movie_count_month.index, y='count',
       #labels=movie_count_month.index,
       labels = Labels,
       color='count',
       title=Title,
       template = Template,
       text_auto=True)
fig_movie_bar.update_xaxes(categoryorder='array',
                 categoryarray= [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])

fig_movie_bar.show()

# Crating a bar chart using the count's colomns to explore esally the max of which year Netflix added movies to its platform.

movie_count_year = pd.DataFrame({'count': data.groupby('type').get_group('Movie').groupby('year_added')['title'].
                            count().sort_values(ascending=False)})
Title='Number of movies add per year to Netflix'
Labels = {"count":"Count of Movies","year_added":"Month"}
movie_year = px.bar(movie_count_year, x=movie_count_year.index, y='count',
       #labels=movie_count.index,
       labels = Labels,
       color='count',
       title=Title,
       template = Template,
       text_auto=True)
movie_year.show()

# Crating a bar chart using the count's colomns to explore esally the max of which month Netflix added TV Show to its platform.

TV_count = pd.DataFrame({'count': data.groupby('type').get_group('TV Show').groupby('month_added')['title'].
                            count().sort_values(ascending=False)})
Title='Number of TV Show Added per month on Netflix'
Labels = {"count":"Count of TV Show","month_added":"Month"}
tv_add_month = px.bar(TV_count, x=TV_count.index, y='count',
       #labels=TV_count.index,
       labels = Labels,
       color='count',
       title=Title,
       template = Template, text_auto=True)
tv_add_month.update_xaxes(categoryorder='array',
                 categoryarray= [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])

tv_add_month.show()

# Creating a bar chart including the movies and TV shows added to Netflix per month to compare.

group = data.groupby(['type'])
months = pd.DataFrame({'moviecount':group.get_group('Movie').groupby('month_added').count()['title'], 
                      'tvshowcount':group.get_group('TV Show').groupby('month_added').count()['title']})
Title='Monthly count of Movies / TVshows added'
Labels = {"value":"Value", "month_added":"Month"}
movie_tv_add = px.bar(data_frame=months, x=months.index, y=['moviecount', 'tvshowcount'],
       barmode='group', title=Title, labels = Labels,
       color_discrete_sequence=colors[0:], template = Template, text_auto=True)
movie_tv_add.update_xaxes(categoryorder='array',
                 categoryarray= [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])

movie_tv_add.show()

# Crating a bar chart using the count's colomns to explore esally the max of which year Netflix added TV shows to its platform.

TV_count = pd.DataFrame({'count': data.groupby('type').get_group('TV Show').groupby('year_added')['title'].
                            count().sort_values(ascending=False)})
Title='Number of TV Show relased per year'
Labels = {"count":"Count of TV Show","year_added":"Year"}
tv_year = px.bar(TV_count, x=TV_count.index, y='count',
       #labels=TV_count.index,
       labels = Labels,
       color='count',
       title=Title,
       template = Template,
       text_auto=True)
tv_year.show()

# Creating a line chart of releasing movies and TV shows yearly.
Title = 'Trend of content produced over the years on Netflix'
Labels = {"type","Show Type"}
# Extract the data
data1 = data[['type','release_year']]
# Another way to rename the labels before we start use them
data1 = data1.rename(columns={"release_year": "Release Year"})
# Grouping the data
data2 = data1.groupby(['Release Year','type']).size().reset_index(name='Total Content')
# Filter the dataset in case to fucose on the shows > 2010
data2 = data2[data2['Release Year']>=2010]
# Plotting using line chart
release_year_line = px.line(data2, x="Release Year", y="Total Content",
                            color='type',
                            title = Title)
release_year_line.show()

"""### Building a Dash app

The texts to include in the app
"""

Head = "NETFLIX"
create = "Author: Karam Abdin"
data_source = "\nDataset source: Kaggle (https://www.kaggle.com/datasets/shivamb/netflix-shows)"
intrudaction = '''Netflix is one of the leading entertainment services globally, with 222 million paid members in over 190 countries enjoying TV series, documentaries, and feature films across various genres and languages. Netflix is one of the leading entertainment services in the world. On any screen connected to the internet, subscribers can watch as much as they want, whenever they want, wherever they want. Members are not required to watch any advertisements or make commitments to play, pause, or resume watching content.'''
comment1 = "The bar chart shows that Netflix contains more movies than TV shows. For more accurate information about the differences, we can calculate the difference using a pie chart, which is 39.4%."
comment2 = "The above graph presents the number of movies and TV shows added to Netflix. It shows that the Netflix platform had an incredible increase in s adding the shows to its platform, whereas 2019 has an all-time high of adding shows. After 2019 the number starts to decrease significantly. In the next step, I will try to explain the cause of that decrease."
comment3 ="The monthly bar chart shows that the number of added movies on the Netflix platform is 500 shows, and the number of TV shows is about 200 shows on average."
comment4 ="Hint: The last bar chart (TV show:88) is unrelated to any month. That could be explained. A TV show could be added to its platform in different months because usually, a TV show is created out of multiple sessions, and each one adds at a different time/month."
comment5 = "The line chart presents the decrease in releasing movies started in 2018, whereas releasing TV shows started to decrease by 2020. That explains the decrease in adding the show to the Netflix platform. The decrease that happened in 2020 could be related to the COVID-19 pandemic."

"""Creating interactive Dash app """

# Dash styles
style2={'display': 'inline-block'}
style2={'display': 'inline-block', 'width': '49%'}
# Create the Dash app object
app = JupyterDash(__name__)
# Creating the app layout 
app.layout = html.Div(
[
    html.H1(Head),

    html.Div(create),
    html.Div(html.P()),
    html.Div(data_source),
    html.Div(html.P()),
    html.Div(intrudaction), 
    html.Div(dcc.Graph( id='graph1', figure=count_shows), style= style2), 
    html.Div(dcc.Graph( id='graph2', figure=ratio_pie) , style= style2),
    html.Div(comment1),
    html.Div(dcc.Graph( id='graph3', figure=movie_tv_add)),
    html.Div(comment3),
    html.Div(html.P()),
    html.Div(comment4),
    html.Div(dcc.Graph( id='graph4', figure=year_added_hist)),
    html.Div(comment2),
    html.Div(dcc.Graph( id='graph5', figure=release_year_line)),
    html.Div(comment5)

]
)

# Running the created app for the first time!
app.run_server(mode='inline')